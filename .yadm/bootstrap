#!/bin/bash
# sudo, git, yadm should be installed manually first
bin_exists() {
  command -v $1 >/dev/null 2>&1
}

is_arch () {
  bin_exists pacman
}

is_osx() {
  [ "$(uname -s)" = 'Darwin' ]
}

# args: name [packages]
ins_wrap() {
  local bin=$1
  if [ "$#" -eq 1 ]; then
    local pacs=$1
  else
    local pacs="${*:2}"
  fi
  bin_exists "$bin" || $pacman_install "$pacs"
}

install_common_pac() {
  # vim
  ins_wrap vim
  # Tmux
  ins_wrap tmux
  # ZSH
  ins_wrap zsh
  # jq
  ins_wrap jq
  # ripgrep
  ins_wrap ripgrep
}

if is_osx; then
  pacman_install="brew install"
  # brew
  if [[ ! -f '/usr/local/bin/brew' ]]; then
    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  fi
  # common
  install_common_pac
  # pip & Powerline
  BREW_PYTHON="/usr/local/bin/python"
  BREW_PIP="/usr/local/bin/pip"
  [[ -f $BREW_PYTHON ]] || $pacman_install python
  which pip > /dev/null || curl https://bootstrap.pypa.io/get-pip.py | $BREW_PYTHON
  $BREW_PIP install powerline-status
  $BREW_PIP install powerline-gitstatus
  # exa
  ins_wrap exa
  # pyenv
  ins_wrap pyenv
  # rbenv
  ins_wrap rbenv
  # fd
  ins_wrap fd
  # ranger
  ins_wrap ranger
else
  if is_arch; then
    bin_exists yaourt || sudo pacman -S --noconfirm yaourt
    pacman_install="sudo yaourt -S --noconfirm"
  else
    pacman_install="sudo apt-get -y install"
  fi
  # folders
  [ -d ~/local/bin ] || mkdir -p ~/local/bin
  [ -d ~/local/log ] || mkdir -p ~/local/log
  # common
  install_common_pac
  # pip & Powerline
  SYS_PYTHON="/usr/bin/python"
  SYS_PIP="/usr/bin/pip"
  [[ -f $SYS_PYTHON ]] || $pacman_install python
  [[ -f $SYS_PIP ]] || $pacman_install python-pip
  sudo $SYS_PIP install powerline-status
  sudo $SYS_PIP install powerline-gitstatus
  # exa
  if is_arch; then
    ins_wrap exa
  else
    if ! bin_exists exa; then
      tmpf=$(mktemp)
      wget https://github.com/ogham/exa/releases/download/v0.8.0/exa-linux-x86_64-0.8.0.zip -O "$tmpf" \
        && unzip "$tmpf" -d ~/local/bin && rm "$tmpf" \
        && mv ~/local/bin/exa-linux-x86_64 ~/local/bin/exa
    fi
  fi
  # Keychain
  ins_wrap keychain
  # pyenv
  bin_exists pyenv || git clone https://github.com/pyenv/pyenv.git ~/.pyenv
  # nvm
  bin_exists nvm || git clone https://github.com/creationix/nvm.git ~/.nvm
  # fd
  if is_arch; then
    ins_wrap fd fd-rs
  else
    if ! bin_exists fd; then
      tmpv="7.0.0"
      tmpf="fd_${tmpv}_amd64.deb"
      tmpl="https://github.com/sharkdp/fd/releases/download/v${tmpv}/${tmpf}"
      wget $tmpl -O /tmp/${tmpf} && sudo dpkg -i /tmp/${tmpf} && rm /tmp/${tmpf}
    fi
  fi
  # ranger
  if is_arch; then
     ins_wrap ranger
  else
    git clone https://github.com/ranger/ranger.git /tmp/ranger && cd /tmp/ranger
    sudo make install
    cd -
  fi

  # rbenv & ruby-build
  if ! bin_exists rbenv; then
    git clone https://github.com/rbenv/rbenv.git ~/.rbenv
    git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build
  fi

  # copyq
  if is_arch; then
    ins_wrap
  fi

  # trahs-cli
  if is_arch; then
     ins_wrap trash-cli
  fi

fi

# Oh-my-zsh
git clone --recurse-submodules https://github.com/15cm/oh-my-zsh.git ~/.oh-my-zsh

# z
git clone https://github.com/rupa/z.git ~/.z

# fzf
if ! bin_exists fzf; then
  git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
  ~/.fzf/install
fi

# vim colors
wget -nc -P ~/.vim/colors https://raw.githubusercontent.com/altercation/vim-colors-solarized/master/colors/solarized.vim

# tpm
git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm

chsh -s "$(command -v zsh)"
